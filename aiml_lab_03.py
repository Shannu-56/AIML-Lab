# -*- coding: utf-8 -*-
"""AIML Lab-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHjh_-ddTYfjp8gkuoAxMkRc4OMyDxCZ

# Implement the AI Game Strategy

## Part 1 –(a). Install the Python Libraries required for Game Strategy
"""

from collections import namedtuple, Counter, defaultdict
import random
import math
import functools
cache=functools.lru_cache(10**6)

class Game:
    def actions(self, state ):
        raise NotImplementedError
    def result(self, state , move ):
        raise NotImplementedError
    def is_terminal (self, state ):
        return not self.actions(state)
    def utility(self, state , player ):
        raise NotImplementedError

def play_game(game, strategies: dict, verbose=False):
    state = game.initial
    while not game.is_terminal(state):
        player = state.to_move
        move = strategies[player](game, state)
        state = game.result(state, move)
    if verbose:
        print('Player', player, 'move:', move)
    print(state)
    return state

"""## Part 2 – Implement the Game Strategy Algorithms"""

def alphabeta_search(game, state):
    player = state.to_move

def max_value(state, alpha, beta):
        if game.is_terminal(state):
            return game.utility(state, player), None
        v, move = -float('inf'), None
        for a in game.actions(state):
            v2, _ = min_value(game.result(state, a), alpha, beta)
            if v2 > v:
                v, move = v2, a
            alpha = max(alpha, v)
            if v >= beta:
                return v, move
        return v, move

def min_value(state, alpha, beta):
        if game.is_terminal(state):
            return game.utility(state, player), None
        v, move = float('inf'), None
        for a in game.actions(state):
            v2, _ = max_value(game.result(state, a), alpha, beta)
            if v2 < v:
                v, move = v2, a
            beta = min(beta, v)
            if v <= alpha:
                return v, move
        return v, move

return max_value(state, -float('inf'), float('inf'))

"""## Part 3 – Implement the Game Strategy using TicTocToe

"""

class TicTacToe(Game):
    """Play TicTacToe on an 'height' by 'width' board, needing 'k' in a row to win.
    'X' plays first against 'O'."""

def _init_(self, height=3, width=3, k=3):
        self.k = k  # k in a row
        self.squares = {(x, y) for x in range(width) for y in range(height)}
        self.initial = Board(height=height, width=width, to_move='X', utility=0)

def actions(self, board):
        """Legal moves are any square not yet taken."""
        return self.squares - set(board)

def result(self, board, square):
        """Place a marker for the current player on the square."""
        player = board.to_move
        board = board.new({square: player}, to_move=('O' if player == 'X' else 'X'))
        win = k_in_row(board, player, square, self.k)
        board.utility = (0 if not win else +1 if player == 'X' else -1)
        return board

def utility(self, board, player):
        """Return the value to the player; 1 for win, -1 for loss, 0 otherwise."""
        return board.utility if player == 'X' else -board.utility

def is_terminal(self, board):
        """A board is a terminal state if it is won or there are no empty squares."""
        return board.utility != 0 or len(self.squares) == len(board)

def display(self, board):
        print(board)

def k_in_row(board, player, square, k):
        """True if player has k pieces in a line through the square."""
        def in_row(x, y, dx, dy):
            return 0 if board[x, y] != player else 1 + in_row(x + dx, y + dy, dx, dy)

return any(in_row(*square, dx, dy) + in_row(*square, -dx, -dy) - 1 >= k
                   for (dx, dy) in ((0, 1), (1, 0), (1, 1), (1, -1)))

class Board(defaultdict):
    empty = '.'
    off = '#'

def init(self, width=8, height=8, to_move=None, **kwds):
        self.dict.update(width=width, height=height, to_move=to_move, **kwds)

def new(self, changes: dict, **kwds) -> 'Board':
        "Given a dict of {(x, y): contents} changes, return a new Board with the changes."
        board = Board(width=self.width, height=self.height, **kwds)
        board.update(self)
        board.update(changes)
        return board

def missing(self, loc):
        x, y = loc
        if 0 <= x < self.width and 0 <= y < self.height:
            return self.empty
        else:
            return self.off

def hash(self):
        return hash(tuple(sorted(self.items()))) + hash(self.to_move)

def repr(self):
        def row(y):
            return ' '.join(self[x, y] for x in range(self.width))
        return '\n'.join(map(row, range(self.height))) + '\n'

def random_player(game, state):
    return random.choice(list(game.actions(state)))

def player(search_algorithm):
    return lambda game, state: search_algorithm(game, state)[1]

"""## Part 4 – Evaluate the AI Game Strategy using TicTocToe

"""

play_game(TicTacToe(), {'X': random_player, 'O': player(alphabeta_search)}, verbose=True).utility
play_game(TicTacToe(), {'X': player(alphabeta_search), 'O': player(minimax_search)}, verbose=True).utility

play_game(TicTacToe(), dict(X=random_player,
                            O=player(alphabeta_search)), verbose=True).utility

play_game(TicTacToe(), dict(X=player(alphabeta_search),
                            O=player(minimax_search)), verbose=True).utility

